"use client";

import React, { useEffect, useState } from "react";
import { useParams } from "next/navigation";
import {Box, Heading, Text, VStack, HStack, Highlight, Button, Stack} from "@chakra-ui/react";
import { Avatar } from "@/components/ui/avatar";
import { Pitch, Author } from "@/hooks/useMockData";
import PageLayout from "@/components/page-layout";
import PitchCard from "@/components/ui/pitch-card";
import {Tooltip} from "@/components/ui/tooltip";
import {FaInfoCircle} from "react-icons/fa";

const AuthorPage = () => {
    const { id } = useParams();
    const [author, setAuthor] = useState<Author | null>(null);
    const [pitches, setPitches] = useState<Pitch[]>([]);

    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        const fetchData = async () => {
            try {
                const response = await fetch("/api/mockData.json"); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø—É—Ç—å
                if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö");

                const data = await response.json();
                console.log("ID –∏–∑ useParams:", id);
                console.log("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", data);

                const foundAuthor = data.authors.find((item: Author) => item.id.toString() === id);
                console.log("–ù–∞–π–¥–µ–Ω–Ω—ã–π –∞–≤—Ç–æ—Ä:", foundAuthor);

                setAuthor(foundAuthor || null);
                setPitches(foundAuthor.articles)
            } catch (err) {
               setError((err as Error).message);
            } finally {
                setLoading(false);
            }
        };

        fetchData();
    }, [id]);

    if (loading) return <Text>–ó–∞–≥—Ä—É–∑–∫–∞...</Text>;
    if (error) return <Text color="red.500">–û—à–∏–±–∫–∞: {error}</Text>;
    if (!author) return <Text textAlign="center">–ê–≤—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω</Text>;


    return (
        <PageLayout>
            <VStack m={4} maxW="800px" mx="auto" my={6} align="flex-start" p={{ base: "20px", md: '0' }}>
                <HStack justify="center" w="100%">
                    <Avatar size="2xl" />
                </HStack>

                <HStack justify="center" align='center' w="100%">
                    <Heading size="3xl" textAlign="center">{author.name}</Heading>
                    <Tooltip showArrow interactive content="–≠—Ç–æ –ø—Å–µ–≤–¥–æ–Ω–∏–º">
                        <Box p={2} w="16px">
                            <FaInfoCircle />
                        </Box>
                    </Tooltip>

                </HStack>


                {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–Ω–æ–ø–∫–æ–π */}
                <HStack justify="center" w="100%" my="16px">
                    <Button background="#00A676" color="#fff" size="md" variant="solid" px={5}>
                        –°–≤—è–∑–∞—Ç—å—Å—è
                    </Button>
                </HStack>

                {/* –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ */}
                <VStack align="start" width="100%" mt="40px">
                    <HStack justify="space-between" width="100%">
                        <Heading size='sm' fontWeight="bold">üìÇ –£—Å–ø–µ—à–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:</Heading>
                        <Text colorScheme="blue">{author.articles.length}</Text>
                    </HStack>
                    <HStack justify="space-between" width="100%">
                        <Heading size='sm' fontWeight="bold">üè¢ –†–∞–±–æ—Ç–∞–ª —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏:</Heading>
                        <Text colorScheme="purple">{author.organizations?.length || 0}</Text>
                    </HStack>
                    <HStack justify="space-between" width="100%">
                        <Heading size='sm' fontWeight="bold">üìç –†–µ–≥–∏–æ–Ω/–≥–æ—Ä–æ–¥:</Heading>
                        <Text  fontSize="sm">{author.location}</Text>
                    </HStack>
                    <HStack justify="space-between" width="100%">
                        <Heading size='sm' fontWeight="bold">‚úàÔ∏è –ì–æ—Ç–æ–≤ –∫ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞–º:</Heading>
                        <Text  fontSize="sm">{author.ready_for_travel ? '‚úÖ' : '‚ùå'}</Text>
                    </HStack>
                    <HStack justify="space-between" width="100%">
                        <Heading size='sm' fontWeight="bold">‚ö° –ì–æ—Ç–æ–≤ –∫ —Å—Ä–æ—á–Ω–æ–π —Ä–∞–±–æ—Ç–µ:</Heading>
                        <Text  fontSize="sm">{author.ready_for_urgent ? '‚úÖ' : '‚ùå'}</Text>
                    </HStack>
                </VStack>

                {/* –¢–µ–º—ã –∏ —Ä–µ–≥–∏–æ–Ω—ã */}
                <Box my="12px">
                    <Text fontSize="sm">
                        –ü–∏—à–µ—Ç –Ω–∞ —Ç–µ–º—ã{" "}
                        {/*@ts-expect-error: Should expect string*/}
                        {author.topics.map((topic, index) => (
                            <React.Fragment key={topic}>
                                <Highlight query={[topic]} styles={{ color: "#000086" }}>
                                    {topic}
                                </Highlight>
                                {index < author.topics.length - 1 && ", "}
                            </React.Fragment>
                        ))}
                        {" "}–≤ —Ä–µ–≥–∏–æ–Ω–∞—Ö{" "}
                        {author.regions.map((region, index) => (
                            <React.Fragment key={region}>
                                <Highlight ignoreCase query={[region]} styles={{ color: "#000086" }}>
                                    {region}
                                </Highlight>
                                {index < author.regions.length - 1 && ", "}
                            </React.Fragment>
                        ))}
                        .{" "}–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –∂–∞–Ω—Ä—ã{" "}
                        {author.formats.map((format, index) => (
                            <React.Fragment key={format}>
                                <Highlight ignoreCase query={[format]} styles={{ color: "#000086" }}>
                                    {format}
                                </Highlight>
                                {index < author.formats.length - 1 && ", "}
                            </React.Fragment>
                        ))}
                    </Text>
                </Box>


                {/* –û–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ */}
                <Box w="100%">
                    <Heading size="xl" mb="20px">–ê–≤—Ç–æ—Ä –æ —Å–µ–±–µ:</Heading>
                    <Text fontSize="sm">{author.bio}</Text>
                </Box>

                {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å */}
                <Stack my={6} w="100%">
                    <Box
                        w="100%"
                        h="2px"
                        backgroundImage= "radial-gradient(circle, {colors.neutral} 1px, transparent 1px)"
                        backgroundPosition= "left bottom"
                        backgroundRepeat= "repeat-x"
                        backgroundSize= "4px 100%"
                    ></Box>
                </Stack>

                {/* –°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–∏—Ç—á–µ–π */}
                <VStack align="start" w="100%">
                    <Heading size="xl" mb="20px">–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–∏—Ç—á–∏:</Heading>
                    {pitches.length > 0 ? (
                        pitches.map((pitch, index) => (
                            <PitchCard key={index} item={pitch} />
                        ))
                    ) : (
                        <Text>–£ —ç—Ç–æ–≥–æ –∞–≤—Ç–æ—Ä–∞ –ø–æ–∫–∞ –Ω–µ—Ç –ø–∏—Ç—á–µ–π.</Text>
                    )}
                </VStack>
            </VStack>

        </PageLayout>
    );
};

export default AuthorPage;
